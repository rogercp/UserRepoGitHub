{"ast":null,"code":"// Handle the client require\nif (typeof require === \"undefined\") {\n  var require = function (pk) {\n    if (pk === \"ul\") {\n      return {\n        deepMerge: function () {\n          var dst = {},\n              src,\n              p,\n              args = [].splice.call(arguments, 0);\n\n          while (args.length > 0) {\n            src = args.splice(-1)[0];\n\n            if (toString.call(src) != \"[object Object]\") {\n              continue;\n            }\n\n            for (p in src) {\n              if (!src.hasOwnProperty(p)) {\n                continue;\n              }\n\n              if (toString.call(src[p]) == \"[object Object]\") {\n                dst[p] = this.deepMerge(src[p], dst[p] || {});\n              } else {\n                if (src[p] !== undefined) {\n                  dst[p] = src[p];\n                }\n              }\n\n              ;\n            }\n          }\n\n          return dst;\n        }\n      };\n    }\n\n    if (pk === \"querystring\") {\n      return {\n        stringify: function (obj) {\n          var str = \"\";\n          Object.keys(obj).forEach(function (c) {\n            str += \"&\" + encodeURIComponent(c) + \"=\" + encodeURIComponent(obj[c]);\n          });\n          return str.substr(1);\n        }\n      };\n    }\n\n    return null;\n  };\n} // Dependencies\n\n\nvar Ul = require(\"ul\"),\n    Jsonreq = require(\"jsonrequest\"),\n    QueryString = require(\"querystring\");\n/**\n * GitHub\n * Creates a new instance of `GitHub`.\n *\n * @name GitHub\n * @function\n * @param {Object} options An object containing the following options:\n *\n *  - `host` (String): The GitHub API host (default: `\"https://api.github.com/\"`).\n *  - `token` (String): The GitHub token.\n *  - `user_agent` (String): The user agen (default: `\"gh.js\"`).\n *\n * @return {GitHub} A new `GitHub` instance.\n */\n\n\nfunction GitHub(options) {\n  options = options || {};\n  this.host = options.host || \"https://api.github.com/\";\n  this.token = options.token;\n  this.user_agent = options.user_agent || \"gh.js\";\n}\n/**\n * req\n * Makes a request to the GitHub API.\n *\n * @name req\n * @function\n * @param {String} url The request url.\n * @param {Object} data The data object.\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\n\n\nGitHub.prototype.req = function (url, data, callback) {\n  var self = this,\n      req = null,\n      url = self.host + url;\n\n  if (typeof data === \"function\") {\n    callback = data;\n    data = undefined;\n  } // Handle the token\n\n\n  if (self.token) {\n    url += url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n    url += \"access_token=\" + self.token;\n  } // Jsonreq on server, XHR on client\n\n\n  if (typeof Jsonreq === \"function\") {\n    req = Jsonreq({\n      url: url,\n      data: data,\n      headers: {\n        \"User-agent\": self.user_agent\n      }\n    }, function (err, data, res) {\n      self.checkResponse(err, data, res, callback);\n    });\n  } else {\n    req = new XMLHttpRequest();\n\n    callback = callback || function () {};\n\n    req.open(\"GET\", url, true);\n    req.send();\n\n    req.onreadystatechange = function () {\n      if (req.readyState !== 4) {\n        return;\n      }\n\n      self.checkResponse(null, req.responseText, {\n        statusCode: req.status\n      }, callback);\n    };\n  }\n\n  return req;\n};\n/**\n * checkResponse\n * Checks if the response is an error or not.\n *\n * @name checkResponse\n * @function\n * @param {Error|null} err The error value.\n * @param {Object} data The data object.\n * @param {Response} res The response object.\n * @param {Function} callback The callback option.\n */\n\n\nGitHub.prototype.checkResponse = function (err, data, res, callback) {\n  if (typeof data === \"string\") {\n    data = JSON.parse(data);\n  }\n\n  if (err) {\n    return callback(err);\n  }\n\n  if (res.statusCode === 200) {\n    return callback(null, data);\n  }\n\n  if (data.message) {\n    return callback(data.message);\n  }\n\n  return callback(null, data);\n};\n/**\n * get\n * Higher level function for making API requests.\n *\n * @name get\n * @function\n * @param {String} url The request url.\n * @param {Object} options An object containing the following fields:\n *\n *  - `all` (Boolean): If `true`, then the endpoint pages will be iterated and the results will be concatenated in one array.\n *  - `opts` (Object): An object containing querystring parameters to be stringified.\n *  - `data` (Object): The POST data (if provided the request will be a POST request).\n *\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\n\n\nGitHub.prototype.get = function (url, options, callback) {\n  var self = this,\n      page = 1,\n      doSeq = null,\n      allItems = null;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  options = Ul.deepMerge(options, {\n    opts: {}\n  });\n\n  if (options.all) {\n    allItems = [];\n    options.opts.per_page = 100;\n\n    doSeq = function () {\n      return self.req(url + \"?\" + QueryString.stringify(Ul.deepMerge({\n        page: page\n      }, options.opts)), options.data, function (err, res) {\n        if (err) {\n          return callback(err);\n        }\n\n        allItems = allItems.concat(res);\n\n        if (!res || !res.length) {\n          return callback(null, allItems);\n        }\n\n        ++page;\n        doSeq();\n      });\n    };\n\n    return doSeq();\n  }\n\n  if (Object.keys(options.opts).length) {\n    url += url + \"?\";\n  }\n\n  return self.req(url + QueryString.stringify(options.opts), options.data, callback);\n};\n\nif (typeof module === \"undefined\" && typeof window === \"object\") {\n  window.GitHub = GitHub;\n} else {\n  module.exports = GitHub;\n}","map":{"version":3,"sources":["C:/Users/Roger/Code/Projects/sortingRepo/sorting/node_modules/gh-polyglot/node_modules/gh.js/lib/index.js"],"names":["require","pk","deepMerge","dst","src","p","args","splice","call","arguments","length","toString","hasOwnProperty","undefined","stringify","obj","str","Object","keys","forEach","c","encodeURIComponent","substr","Ul","Jsonreq","QueryString","GitHub","options","host","token","user_agent","prototype","req","url","data","callback","self","indexOf","headers","err","res","checkResponse","XMLHttpRequest","open","send","onreadystatechange","readyState","responseText","statusCode","status","JSON","parse","message","get","page","doSeq","allItems","opts","all","per_page","concat","module","window","exports"],"mappings":"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","sourcesContent":["// Handle the client require\nif (typeof require === \"undefined\") {\n    var require = function (pk) {\n        if (pk === \"ul\") {\n            return {\n                deepMerge: function () { var dst = {} , src , p , args = [].splice.call(arguments, 0) ; while (args.length > 0) { src = args.splice(-1)[0]; if (toString.call(src) != \"[object Object]\") { continue; } for (p in src) { if (!src.hasOwnProperty(p)) { continue; } if (toString.call(src[p]) == \"[object Object]\") { dst[p] = this.deepMerge(src[p], dst[p] || {}); } else { if (src[p] !== undefined) { dst[p] = src[p]; } }; } } return dst; }\n            };\n        }\n        if (pk === \"querystring\") {\n            return {\n                stringify: function (obj) {\n                    var str = \"\";\n                    Object.keys(obj).forEach(function (c) {\n                        str += \"&\" + encodeURIComponent(c) + \"=\" + encodeURIComponent(obj[c]);\n                    });\n                    return str.substr(1);\n                }\n            };\n        }\n        return null;\n    };\n}\n\n// Dependencies\nvar Ul = require(\"ul\")\n  , Jsonreq = require(\"jsonrequest\")\n  , QueryString = require(\"querystring\")\n  ;\n\n/**\n * GitHub\n * Creates a new instance of `GitHub`.\n *\n * @name GitHub\n * @function\n * @param {Object} options An object containing the following options:\n *\n *  - `host` (String): The GitHub API host (default: `\"https://api.github.com/\"`).\n *  - `token` (String): The GitHub token.\n *  - `user_agent` (String): The user agen (default: `\"gh.js\"`).\n *\n * @return {GitHub} A new `GitHub` instance.\n */\nfunction GitHub (options) {\n    options = options || {};\n    this.host = options.host || \"https://api.github.com/\";\n    this.token = options.token;\n    this.user_agent = options.user_agent || \"gh.js\";\n}\n\n/**\n * req\n * Makes a request to the GitHub API.\n *\n * @name req\n * @function\n * @param {String} url The request url.\n * @param {Object} data The data object.\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\nGitHub.prototype.req = function (url, data, callback) {\n    var self = this\n      , req = null\n      , url = self.host + url\n      ;\n\n    if (typeof data === \"function\") {\n        callback = data;\n        data = undefined;\n    }\n\n    // Handle the token\n    if (self.token) {\n        url += url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n        url += \"access_token=\" + self.token;\n    }\n\n    // Jsonreq on server, XHR on client\n    if (typeof Jsonreq === \"function\") {\n        req = Jsonreq({\n            url: url\n          , data: data\n          , headers: {\n                \"User-agent\": self.user_agent\n            }\n        }, function (err, data, res) {\n            self.checkResponse(err, data, res, callback);\n        });\n    } else {\n        req = new XMLHttpRequest();\n        callback = callback || function () {};\n        req.open(\"GET\", url, true);\n        req.send();\n        req.onreadystatechange = function() {\n            if (req.readyState !== 4) { return; }\n            self.checkResponse(null, req.responseText, {\n                statusCode: req.status\n            }, callback);\n        };\n    }\n\n    return req;\n};\n\n/**\n * checkResponse\n * Checks if the response is an error or not.\n *\n * @name checkResponse\n * @function\n * @param {Error|null} err The error value.\n * @param {Object} data The data object.\n * @param {Response} res The response object.\n * @param {Function} callback The callback option.\n */\nGitHub.prototype.checkResponse = function (err, data, res, callback) {\n    if (typeof data === \"string\") {\n        data = JSON.parse(data);\n    }\n    if (err) { return callback(err); }\n    if (res.statusCode === 200) { return callback(null, data); }\n    if (data.message) { return callback(data.message); }\n    return callback(null, data);\n};\n\n/**\n * get\n * Higher level function for making API requests.\n *\n * @name get\n * @function\n * @param {String} url The request url.\n * @param {Object} options An object containing the following fields:\n *\n *  - `all` (Boolean): If `true`, then the endpoint pages will be iterated and the results will be concatenated in one array.\n *  - `opts` (Object): An object containing querystring parameters to be stringified.\n *  - `data` (Object): The POST data (if provided the request will be a POST request).\n *\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\nGitHub.prototype.get = function (url, options, callback) {\n\n    var self = this\n      , page = 1\n      , doSeq = null\n      , allItems = null\n      ;\n\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n\n    options = Ul.deepMerge(options, {\n        opts: {}\n    });\n\n    if (options.all) {\n        allItems = [];\n        options.opts.per_page = 100;\n        doSeq = function () {\n            return self.req(url + \"?\" + QueryString.stringify(Ul.deepMerge({\n                page: page\n            }, options.opts)), options.data, function (err, res) {\n                if (err) { return callback(err); }\n                allItems = allItems.concat(res);\n                if (!res || !res.length) {\n                    return callback(null, allItems);\n                }\n                ++page;\n                doSeq();\n            });\n        };\n        return doSeq();\n    }\n\n    if (Object.keys(options.opts).length) {\n        url += url + \"?\";\n    }\n\n    return self.req(url + QueryString.stringify(options.opts), options.data, callback);\n};\n\nif (typeof module === \"undefined\" && typeof window === \"object\") {\n    window.GitHub = GitHub;\n} else {\n    module.exports = GitHub;\n}\n"]},"metadata":{},"sourceType":"script"}