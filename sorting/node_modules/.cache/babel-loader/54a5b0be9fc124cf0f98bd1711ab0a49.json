{"ast":null,"code":"\"use strict\";\n\nvar iterateObj = require(\"iterate-object\"),\n    sliced = require(\"sliced\");\n/**\n * elly\n * Selects the DOM elements based on the provided selector. If there is no\n * commonjs/module environment, the `$` global variable will be created.\n *\n * @name elly\n * @function\n * @param {String|HTMLElement} input The element selector (e.g.\n * `'#my-id > .my-class'`), the element tag you want to create\n * (e.g. `'<ul>'`) or the HTML element (will be returned by the function).\n * @param {Object|HTMLElement} contextOrAttributes\n * @returns {HTMLElement} The HTMLElement that was provided or selected.\n */\n\n\nfunction $(input, contextOrAttributes) {\n  if (typeof input === \"string\") {\n    if (input.charAt(0) === \"<\") {\n      input = document.createElement(input.slice(1, -1));\n      iterateObj(contextOrAttributes || {}, function (value, name) {\n        switch (name) {\n          case \"text\":\n            input.textContent = value;\n            return;\n\n          case \"html\":\n            input.innerHTML = value;\n            return;\n        }\n\n        input.setAttribute(name, value);\n      });\n      return input;\n    } else {\n      contextOrAttributes = contextOrAttributes || document;\n      return contextOrAttributes.querySelector(input);\n    }\n  }\n\n  return input;\n}\n\n;\n/**\n * elly.$$\n * Selects multiple elements. Note that if there is no commonjs/module environment, you will access this function using `$.$$`.\n *\n * @name elly.$$\n * @function\n * @param {String} selector The DOM query selector.\n * @param {HTMLElement} context The element context/container. Defaults to `document`.\n * @returns {Array} The array of elements.\n */\n\n$.$$ = function (selector, context) {\n  if (typeof selector === \"string\") {\n    context = context || document;\n    return sliced(context.querySelectorAll(selector));\n  }\n\n  return [selector];\n};\n\nmodule.exports = $;","map":{"version":3,"sources":["C:/Users/Roger/Code/Projects/sortingRepo/sorting/node_modules/elly/lib/index.js"],"names":["iterateObj","require","sliced","$","input","contextOrAttributes","charAt","document","createElement","slice","value","name","textContent","innerHTML","setAttribute","querySelector","$$","selector","context","querySelectorAll","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CADpB;AAGA;;;;;;;;;;;;;;;AAaA,SAASE,CAAT,CAAWC,KAAX,EAAkBC,mBAAlB,EAAuC;AACnC,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC3B,QAAIA,KAAK,CAACE,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AACzBF,MAAAA,KAAK,GAAGG,QAAQ,CAACC,aAAT,CAAuBJ,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAvB,CAAR;AACAT,MAAAA,UAAU,CAACK,mBAAmB,IAAI,EAAxB,EAA4B,UAAUK,KAAV,EAAiBC,IAAjB,EAAuB;AAEzD,gBAAQA,IAAR;AACI,eAAK,MAAL;AACIP,YAAAA,KAAK,CAACQ,WAAN,GAAoBF,KAApB;AACA;;AACJ,eAAK,MAAL;AACIN,YAAAA,KAAK,CAACS,SAAN,GAAkBH,KAAlB;AACA;AANR;;AASAN,QAAAA,KAAK,CAACU,YAAN,CAAmBH,IAAnB,EAAyBD,KAAzB;AACH,OAZS,CAAV;AAaA,aAAON,KAAP;AACH,KAhBD,MAgBO;AACHC,MAAAA,mBAAmB,GAAGA,mBAAmB,IAAIE,QAA7C;AACA,aAAOF,mBAAmB,CAACU,aAApB,CAAkCX,KAAlC,CAAP;AACH;AACJ;;AACD,SAAOA,KAAP;AACH;;AAAA;AAED;;;;;;;;;;;AAUAD,CAAC,CAACa,EAAF,GAAO,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AAChC,MAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAC9BC,IAAAA,OAAO,GAAGA,OAAO,IAAIX,QAArB;AACA,WAAOL,MAAM,CAACgB,OAAO,CAACC,gBAAR,CAAyBF,QAAzB,CAAD,CAAb;AACH;;AACD,SAAO,CAACA,QAAD,CAAP;AACH,CAND;;AAQAG,MAAM,CAACC,OAAP,GAAiBlB,CAAjB","sourcesContent":["\"use strict\";\n\nvar iterateObj = require(\"iterate-object\"),\n    sliced = require(\"sliced\");\n\n/**\n * elly\n * Selects the DOM elements based on the provided selector. If there is no\n * commonjs/module environment, the `$` global variable will be created.\n *\n * @name elly\n * @function\n * @param {String|HTMLElement} input The element selector (e.g.\n * `'#my-id > .my-class'`), the element tag you want to create\n * (e.g. `'<ul>'`) or the HTML element (will be returned by the function).\n * @param {Object|HTMLElement} contextOrAttributes\n * @returns {HTMLElement} The HTMLElement that was provided or selected.\n */\nfunction $(input, contextOrAttributes) {\n    if (typeof input === \"string\") {\n        if (input.charAt(0) === \"<\") {\n            input = document.createElement(input.slice(1, -1));\n            iterateObj(contextOrAttributes || {}, function (value, name) {\n\n                switch (name) {\n                    case \"text\":\n                        input.textContent = value;\n                        return;\n                    case \"html\":\n                        input.innerHTML = value;\n                        return;\n                }\n\n                input.setAttribute(name, value);\n            });\n            return input;\n        } else {\n            contextOrAttributes = contextOrAttributes || document;\n            return contextOrAttributes.querySelector(input);\n        }\n    }\n    return input;\n};\n\n/**\n * elly.$$\n * Selects multiple elements. Note that if there is no commonjs/module environment, you will access this function using `$.$$`.\n *\n * @name elly.$$\n * @function\n * @param {String} selector The DOM query selector.\n * @param {HTMLElement} context The element context/container. Defaults to `document`.\n * @returns {Array} The array of elements.\n */\n$.$$ = function (selector, context) {\n    if (typeof selector === \"string\") {\n        context = context || document;\n        return sliced(context.querySelectorAll(selector));\n    }\n    return [selector];\n};\n\nmodule.exports = $;"]},"metadata":{},"sourceType":"script"}