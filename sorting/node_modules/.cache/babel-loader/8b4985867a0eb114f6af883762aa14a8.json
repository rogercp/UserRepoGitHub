{"ast":null,"code":"\"use strict\";\n\nvar githubCalendarLegend = require(\"github-calendar-legend\");\n/**\n * parseGitHubCalendarSvg\n * Parses the SVG input (as string).\n *\n * @name parseGitHubCalendarSvg\n * @function\n * @param {String} input The SVG code of the contributions calendar.\n * @return {Object} An object containing:\n *\n *  - `last_year` (Number): The total contributions in the last year.\n *  - `longest_streak` (Number): The longest streak.\n *  - `longest_streak_range` (Array): An array of two date objects representing the date range.\n *  - `current_streak` (Number): The current streak.\n *  - `current_streak_range` (Array): An array of two date objects representing the date range.\n *  - `days` (Array): An array of day objects:\n *       - `fill` (String): The hex color.\n *       - `date` (Date): The day date.\n *       - `count` (Number): The number of commits.\n *       - `level` (Number): A number between 0 and 4 (inclusive) representing the contribution level (more commits, higher value).\n *  - `weeks` (Array): The day objects grouped by weeks (arrays).\n *  - `last_contributed` (Date): The last contribution date.\n */\n\n\nmodule.exports = function parseGitHubCalendarSvg(input) {\n  var data = {\n    last_year: 0,\n    longest_streak: -1,\n    longest_streak_range: [],\n    current_streak: 0,\n    current_streak_range: [],\n    weeks: [],\n    days: [],\n    last_contributed: null\n  },\n      lastWeek = [],\n      updateLongestStreak = function updateLongestStreak() {\n    if (data.current_streak > data.longest_streak) {\n      data.longest_streak = data.current_streak;\n      data.longest_streak_range[0] = data.current_streak_range[0];\n      data.longest_streak_range[1] = data.current_streak_range[1];\n    }\n  };\n\n  input.split(\"\\n\").slice(2).map(function (c) {\n    return c.trim();\n  }).forEach(function (c) {\n    if (c.startsWith(\"<g transform\")) {\n      return lastWeek.length && data.weeks.push(lastWeek) && (lastWeek = []);\n    }\n\n    var fill = c.match(/fill=\"(#[a-z0-9]+)\"/),\n        date = c.match(/data-date=\"([0-9\\-]+)\"/),\n        count = c.match(/data-count=\"([0-9]+)\"/),\n        level = null;\n    fill = fill && fill[1];\n    date = date && date[1];\n    count = count && +count[1];\n\n    if (!fill) {\n      return;\n    }\n\n    var obj = {\n      fill: fill,\n      date: new Date(date),\n      count: count,\n      level: githubCalendarLegend.indexOf(fill)\n    };\n\n    if (data.current_streak === 0) {\n      data.current_streak_range[0] = obj.date;\n    }\n\n    if (obj.count) {\n      ++data.current_streak;\n      data.last_year += obj.count;\n      data.last_contributed = obj.date;\n      data.current_streak_range[1] = obj.date;\n    } else {\n      updateLongestStreak();\n      data.current_streak = 0;\n    }\n\n    lastWeek.push(obj);\n    data.days.push(obj);\n  });\n  updateLongestStreak();\n  return data;\n};","map":{"version":3,"sources":["C:/Users/Roger/Code/Projects/sortingRepo/sorting/node_modules/github-calendar-parser/lib/index.js"],"names":["githubCalendarLegend","require","module","exports","parseGitHubCalendarSvg","input","data","last_year","longest_streak","longest_streak_range","current_streak","current_streak_range","weeks","days","last_contributed","lastWeek","updateLongestStreak","split","slice","map","c","trim","forEach","startsWith","length","push","fill","match","date","count","level","obj","Date","indexOf"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar githubCalendarLegend = require(\"github-calendar-legend\");\n\n/**\n * parseGitHubCalendarSvg\n * Parses the SVG input (as string).\n *\n * @name parseGitHubCalendarSvg\n * @function\n * @param {String} input The SVG code of the contributions calendar.\n * @return {Object} An object containing:\n *\n *  - `last_year` (Number): The total contributions in the last year.\n *  - `longest_streak` (Number): The longest streak.\n *  - `longest_streak_range` (Array): An array of two date objects representing the date range.\n *  - `current_streak` (Number): The current streak.\n *  - `current_streak_range` (Array): An array of two date objects representing the date range.\n *  - `days` (Array): An array of day objects:\n *       - `fill` (String): The hex color.\n *       - `date` (Date): The day date.\n *       - `count` (Number): The number of commits.\n *       - `level` (Number): A number between 0 and 4 (inclusive) representing the contribution level (more commits, higher value).\n *  - `weeks` (Array): The day objects grouped by weeks (arrays).\n *  - `last_contributed` (Date): The last contribution date.\n */\nmodule.exports = function parseGitHubCalendarSvg(input) {\n\n    var data = {\n        last_year: 0,\n        longest_streak: -1,\n        longest_streak_range: [],\n        current_streak: 0,\n        current_streak_range: [],\n        weeks: [],\n        days: [],\n        last_contributed: null\n    },\n        lastWeek = [],\n        updateLongestStreak = function updateLongestStreak() {\n        if (data.current_streak > data.longest_streak) {\n            data.longest_streak = data.current_streak;\n            data.longest_streak_range[0] = data.current_streak_range[0];\n            data.longest_streak_range[1] = data.current_streak_range[1];\n        }\n    };\n\n    input.split(\"\\n\").slice(2).map(function (c) {\n        return c.trim();\n    }).forEach(function (c) {\n        if (c.startsWith(\"<g transform\")) {\n            return lastWeek.length && data.weeks.push(lastWeek) && (lastWeek = []);\n        }\n\n        var fill = c.match(/fill=\"(#[a-z0-9]+)\"/),\n            date = c.match(/data-date=\"([0-9\\-]+)\"/),\n            count = c.match(/data-count=\"([0-9]+)\"/),\n            level = null;\n\n        fill = fill && fill[1];\n        date = date && date[1];\n        count = count && +count[1];\n\n        if (!fill) {\n            return;\n        }\n\n        var obj = {\n            fill: fill,\n            date: new Date(date),\n            count: count,\n            level: githubCalendarLegend.indexOf(fill)\n        };\n\n        if (data.current_streak === 0) {\n            data.current_streak_range[0] = obj.date;\n        }\n\n        if (obj.count) {\n            ++data.current_streak;\n            data.last_year += obj.count;\n            data.last_contributed = obj.date;\n            data.current_streak_range[1] = obj.date;\n        } else {\n            updateLongestStreak();\n            data.current_streak = 0;\n        }\n\n        lastWeek.push(obj);\n        data.days.push(obj);\n    });\n\n    updateLongestStreak();\n\n    return data;\n};"]},"metadata":{},"sourceType":"script"}