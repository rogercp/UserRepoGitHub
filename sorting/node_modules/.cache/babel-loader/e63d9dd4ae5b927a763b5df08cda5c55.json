{"ast":null,"code":"\"use strict\";\n/*!\n * GitHubColors\n *\n * @name GitHubColors\n * @function\n * @return {undefined}\n */\n\nfunction GitHubColors() {\n  this.colors = null;\n  this.extensions = null;\n}\n/**\n * init\n * Inits the GitHub extensions/colors.\n *\n * @name init\n * @function\n * @param {Boolean} ext If `true`, the extensions will be initialized.\n * @return {Object} The `extensions` or `colors` object.\n */\n\n\nGitHubColors.prototype.init = function (ext) {\n  if (ext) {\n    return this.extensions = this.extensions || require(\"./extensions\");\n  }\n\n  return this.colors = this.colors || require(\"./colors\");\n};\n/**\n * get\n * Gets the color object for the provided language.\n *\n * @name get\n * @function\n * @param {String} lang The language to get the color for.\n * @param {Boolean} handleOthers If `false` and the color is not found `undefined` will be returned. Otherwise a gray color will be returned.\n * @return {Object|undefined} The color that was found.\n */\n\n\nGitHubColors.prototype.get = function (lang, handleOthers) {\n  this.init();\n  var found = this.colors[lang];\n\n  if (handleOthers) {\n    found = found || {};\n    found.color = found.color || \"#ccc\";\n  }\n\n  return found;\n};\n/**\n * ext\n * Get the color object for the provided extension.\n *\n * @name ext\n * @function\n * @param {String} ext The extension to get the color for.\n * @param {Boolean} handleOthers If `false` and the color is not found `undefined` will be returned. Otherwise a gray color will be returned.\n * @return {Object|undefined} The color that was found.\n */\n\n\nGitHubColors.prototype.ext = function (ext, handleOthers) {\n  this.init(true);\n  var found = this.extensions[ext];\n\n  if (handleOthers) {\n    found = found || {};\n    found.color = found.color || \"#ccc\";\n  }\n\n  return found;\n};\n\nmodule.exports = new GitHubColors();","map":{"version":3,"sources":["C:/Users/Roger/Code/Projects/sortingRepo/sorting/node_modules/github-colors/lib/index.js"],"names":["GitHubColors","colors","extensions","prototype","init","ext","require","get","lang","handleOthers","found","color","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,SAASA,YAAT,GAAwB;AACpB,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,UAAL,GAAkB,IAAlB;AACH;AAED;;;;;;;;;;;AASAF,YAAY,CAACG,SAAb,CAAuBC,IAAvB,GAA8B,UAAUC,GAAV,EAAe;AACzC,MAAIA,GAAJ,EAAS;AACL,WAAO,KAAKH,UAAL,GAAkB,KAAKA,UAAL,IAAmBI,OAAO,CAAC,cAAD,CAAnD;AACH;;AAED,SAAO,KAAKL,MAAL,GAAc,KAAKA,MAAL,IAAeK,OAAO,CAAC,UAAD,CAA3C;AACH,CAND;AAQA;;;;;;;;;;;;AAUAN,YAAY,CAACG,SAAb,CAAuBI,GAAvB,GAA6B,UAAUC,IAAV,EAAgBC,YAAhB,EAA8B;AACvD,OAAKL,IAAL;AACA,MAAIM,KAAK,GAAG,KAAKT,MAAL,CAAYO,IAAZ,CAAZ;;AACA,MAAIC,YAAJ,EAAkB;AACdC,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACAA,IAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,IAAe,MAA7B;AACH;;AACD,SAAOD,KAAP;AACH,CARD;AAUA;;;;;;;;;;;;AAUAV,YAAY,CAACG,SAAb,CAAuBE,GAAvB,GAA6B,UAAUA,GAAV,EAAeI,YAAf,EAA6B;AACtD,OAAKL,IAAL,CAAU,IAAV;AACA,MAAIM,KAAK,GAAG,KAAKR,UAAL,CAAgBG,GAAhB,CAAZ;;AACA,MAAII,YAAJ,EAAkB;AACdC,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACAA,IAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,IAAe,MAA7B;AACH;;AACD,SAAOD,KAAP;AACH,CARD;;AAUAE,MAAM,CAACC,OAAP,GAAiB,IAAIb,YAAJ,EAAjB","sourcesContent":["\"use strict\";\n\n/*!\n * GitHubColors\n *\n * @name GitHubColors\n * @function\n * @return {undefined}\n */\nfunction GitHubColors() {\n    this.colors = null;\n    this.extensions = null;\n}\n\n/**\n * init\n * Inits the GitHub extensions/colors.\n *\n * @name init\n * @function\n * @param {Boolean} ext If `true`, the extensions will be initialized.\n * @return {Object} The `extensions` or `colors` object.\n */\nGitHubColors.prototype.init = function (ext) {\n    if (ext) {\n        return this.extensions = this.extensions || require(\"./extensions\");\n    }\n\n    return this.colors = this.colors || require(\"./colors\");\n};\n\n/**\n * get\n * Gets the color object for the provided language.\n *\n * @name get\n * @function\n * @param {String} lang The language to get the color for.\n * @param {Boolean} handleOthers If `false` and the color is not found `undefined` will be returned. Otherwise a gray color will be returned.\n * @return {Object|undefined} The color that was found.\n */\nGitHubColors.prototype.get = function (lang, handleOthers) {\n    this.init();\n    var found = this.colors[lang];\n    if (handleOthers) {\n        found = found || {};\n        found.color = found.color || \"#ccc\";\n    }\n    return found;\n};\n\n/**\n * ext\n * Get the color object for the provided extension.\n *\n * @name ext\n * @function\n * @param {String} ext The extension to get the color for.\n * @param {Boolean} handleOthers If `false` and the color is not found `undefined` will be returned. Otherwise a gray color will be returned.\n * @return {Object|undefined} The color that was found.\n */\nGitHubColors.prototype.ext = function (ext, handleOthers) {\n    this.init(true);\n    var found = this.extensions[ext];\n    if (handleOthers) {\n        found = found || {};\n        found.color = found.color || \"#ccc\";\n    }\n    return found;\n};\n\nmodule.exports = new GitHubColors();"]},"metadata":{},"sourceType":"script"}