{"ast":null,"code":"\"use strict\";\n\nvar months = require(\"months\"),\n    days = require(\"days\"),\n    fillo = require(\"fillo\"),\n    ParseIt = require(\"parse-it\").Parser;\n\nvar rules = {\n  // Years\n  /// 2015\n  YYYY: function YYYY(i, utc) {\n    if (utc) {\n      return i.getUTCFullYear();\n    }\n\n    return i.getFullYear();\n  } // 15\n  ,\n  YY: function YY(i, utc) {\n    return rules.YYYY(i, utc) % 100;\n  } // Months\n  // January\n  ,\n  MMMM: function MMMM(i, utc) {\n    if (utc) {\n      return months[i.getUTCMonth()];\n    }\n\n    return months[i.getMonth()];\n  } // Jan\n  ,\n  MMM: function MMM(i, utc) {\n    if (utc) {\n      return months.abbr[i.getUTCMonth()];\n    }\n\n    return months.abbr[i.getMonth()];\n  } // 01\n  ,\n  MM: function MM(i, utc) {\n    if (utc) {\n      return fillo(i.getUTCMonth() + 1);\n    }\n\n    return fillo(i.getMonth() + 1);\n  } // 1\n  ,\n  M: function M(i, utc) {\n    if (utc) {\n      return i.getUTCMonth() + 1;\n    }\n\n    return i.getMonth() + 1;\n  } // Days\n  // Sunday\n  ,\n  dddd: function dddd(i, utc) {\n    return days[rules.d(i, utc)];\n  } // Sun\n  ,\n  ddd: function ddd(i, utc) {\n    return days.abbr[rules.d(i, utc)];\n  } // Su\n  ,\n  dd: function dd(i, utc) {\n    return days.short[rules.d(i, utc)];\n  } // 0\n  ,\n  d: function d(i, utc) {\n    if (utc) {\n      return i.getUTCDay();\n    }\n\n    return i.getDay();\n  } // Dates\n  // 06  Day in month\n  ,\n  DD: function DD(i, utc) {\n    return fillo(rules.D(i, utc));\n  } // 6   Day in month\n  ,\n  D: function D(i, utc) {\n    if (utc) {\n      return i.getUTCDate();\n    }\n\n    return i.getDate();\n  } // AM/PM\n  // AM/PM\n  ,\n  A: function A(i, utc) {\n    return rules.a(i, utc).toUpperCase();\n  } // am/pm\n  ,\n  a: function a(i, utc) {\n    return rules.H(i, utc) >= 12 ? \"pm\" : \"am\";\n  } // Hours\n  // 08 Hour\n  ,\n  hh: function hh(i, utc) {\n    return fillo(rules.h(i, utc));\n  } // 8 Hour\n  ,\n  h: function h(i, utc) {\n    return rules.H(i, utc) % 12 || 12;\n  } // (alias)\n  ,\n  HH: function HH(i, utc) {\n    return fillo(rules.H(i, utc));\n  } // (alias)\n  ,\n  H: function H(i, utc) {\n    if (utc) {\n      return i.getUTCHours();\n    }\n\n    return i.getHours();\n  } // Minutes\n  // 09 Minute\n  ,\n  mm: function mm(i, utc) {\n    return fillo(rules.m(i, utc));\n  } // 9  Minute\n  ,\n  m: function m(i, utc) {\n    if (utc) {\n      return i.getUTCMinutes();\n    }\n\n    return i.getMinutes();\n  } // Seconds\n  // 09 Seconds\n  ,\n  ss: function ss(i, utc) {\n    return fillo(rules.s(i, utc));\n  } // 9  Seconds\n  ,\n  s: function s(i, utc) {\n    if (utc) {\n      return i.getUTCSeconds();\n    }\n\n    return i.getSeconds();\n  } // Fractional seconds\n  // 0 1 ... 8 9\n  ,\n  S: function S(i, utc) {\n    return Math.round(rules.s(i, utc) / 60 * 10);\n  },\n  SS: function SS(i, utc) {\n    return fillo(rules.s(i, utc) / 60 * 100);\n  },\n  SSS: function SSS(i, utc) {\n    return fillo(rules.s(i, utc) / 60 * 1000, 3);\n  } // Timezones\n  ,\n  Z: function Z(i) {\n    var offset = -i.getTimezoneOffset();\n    return (offset >= 0 ? \"+\" : \"-\") + fillo(parseInt(offset / 60)) + \":\" + fillo(offset % 60);\n  },\n  ZZ: function ZZ(i) {\n    var offset = -i.getTimezoneOffset();\n    return (offset >= 0 ? \"+\" : \"-\") + fillo(parseInt(offset / 60)) + fillo(offset % 60);\n  }\n};\nvar parser = new ParseIt(rules);\n/**\n * formatoid\n * Formats the date into a given format.\n *\n * Usable format fields:\n *\n *  - **Years**\n *      - `YYYY` (e.g. `\"2015\"`)\n *      - `YY` (e.g. `\"15\"`)\n *  - **Months**\n *      - `MMMM` (e.g. `\"January\"`)\n *      - `MMM` (e.g. `\"Jan\"`)\n *      - `MM` (e.g. `\"01\"`)\n *      - `M` (e.g. `\"1\"`)\n *  - **Days**\n *      - `dddd` (e.g. `\"Sunday\"`)\n *      - `ddd` (e.g. `\"Sun\"`)\n *      - `dd` (e.g. `\"Su\"`)\n *      - `d` (e.g. `\"Su\"`)\n *  - **Dates**\n *      - `DD` (e.g. `\"07\"`)\n *      - `D` (e.g. `\"7\"`)\n *  - **AM/PM**\n *      - `A` (e.g. `\"AM\"`)\n *      - `a` (e.g. `\"pm\"`)\n *  - **Hours**\n *      - `hh` (e.g. `\"07\"`)–12 hour format\n *      - `h` (e.g. `\"7\"`)\n *      - `HH` (e.g. `\"07\"`)–24 hour format\n *      - `H` (e.g. `\"7\"`)\n *  - **Minutes**\n *      - `mm` (e.g. `\"07\"`)\n *      - `m` (e.g. `\"7\"`)\n *  - **Seconds**\n *      - `ss` (e.g. `\"07\"`)\n *      - `s` (e.g. `\"7\"`)\n *  - **Fractional seconds**\n *      - `S` (e.g. `0 1 2 3 ... 9`)\n *      - `SS` (e.g. `00 01 02 ... 98 99`)\n *      - `SS` (e.g. `000 001 002 ... 998 999`)\n *  - **Timezones**\n *      - `Z` (e.g. `-07:00 -06:00 ... +06:00 +07:00`)\n *      - `ZZ` (e.g. `-0700 -0600 ... +0600 +0700`)\n *\n * @name formatoid\n * @function\n * @param {Date} i The date object.\n * @param {String} f The date format.\n * @return {String} The formatted date (as string).\n */\n\nmodule.exports = function formatoid(i, f) {\n  return parser.run(f, [i, i._useUTC]);\n};","map":{"version":3,"sources":["C:/Users/Roger/Code/Projects/sortingRepo/sorting/node_modules/formatoid/lib/index.js"],"names":["months","require","days","fillo","ParseIt","Parser","rules","YYYY","i","utc","getUTCFullYear","getFullYear","YY","MMMM","getUTCMonth","getMonth","MMM","abbr","MM","M","dddd","d","ddd","dd","short","getUTCDay","getDay","DD","D","getUTCDate","getDate","A","a","toUpperCase","H","hh","h","HH","getUTCHours","getHours","mm","m","getUTCMinutes","getMinutes","ss","s","getUTCSeconds","getSeconds","S","Math","round","SS","SSS","Z","offset","getTimezoneOffset","parseInt","ZZ","parser","module","exports","formatoid","f","run","_useUTC"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar months = require(\"months\"),\n    days = require(\"days\"),\n    fillo = require(\"fillo\"),\n    ParseIt = require(\"parse-it\").Parser;\n\nvar rules = {\n    // Years\n    /// 2015\n    YYYY: function YYYY(i, utc) {\n        if (utc) {\n            return i.getUTCFullYear();\n        }\n        return i.getFullYear();\n    }\n\n    // 15\n    ,\n    YY: function YY(i, utc) {\n        return rules.YYYY(i, utc) % 100;\n    }\n\n    // Months\n    // January\n    ,\n    MMMM: function MMMM(i, utc) {\n        if (utc) {\n            return months[i.getUTCMonth()];\n        }\n        return months[i.getMonth()];\n    }\n\n    // Jan\n    ,\n    MMM: function MMM(i, utc) {\n        if (utc) {\n            return months.abbr[i.getUTCMonth()];\n        }\n        return months.abbr[i.getMonth()];\n    }\n\n    // 01\n    ,\n    MM: function MM(i, utc) {\n        if (utc) {\n            return fillo(i.getUTCMonth() + 1);\n        }\n        return fillo(i.getMonth() + 1);\n    }\n\n    // 1\n    ,\n    M: function M(i, utc) {\n        if (utc) {\n            return i.getUTCMonth() + 1;\n        }\n        return i.getMonth() + 1;\n    }\n\n    // Days\n    // Sunday\n    ,\n    dddd: function dddd(i, utc) {\n        return days[rules.d(i, utc)];\n    }\n\n    // Sun\n    ,\n    ddd: function ddd(i, utc) {\n        return days.abbr[rules.d(i, utc)];\n    }\n\n    // Su\n    ,\n    dd: function dd(i, utc) {\n        return days.short[rules.d(i, utc)];\n    }\n\n    // 0\n    ,\n    d: function d(i, utc) {\n        if (utc) {\n            return i.getUTCDay();\n        }\n        return i.getDay();\n    }\n\n    // Dates\n    // 06  Day in month\n    ,\n    DD: function DD(i, utc) {\n        return fillo(rules.D(i, utc));\n    }\n\n    // 6   Day in month\n    ,\n    D: function D(i, utc) {\n        if (utc) {\n            return i.getUTCDate();\n        }\n        return i.getDate();\n    }\n\n    // AM/PM\n    // AM/PM\n    ,\n    A: function A(i, utc) {\n        return rules.a(i, utc).toUpperCase();\n    }\n\n    // am/pm\n    ,\n    a: function a(i, utc) {\n        return rules.H(i, utc) >= 12 ? \"pm\" : \"am\";\n    }\n\n    // Hours\n    // 08 Hour\n    ,\n    hh: function hh(i, utc) {\n        return fillo(rules.h(i, utc));\n    }\n\n    // 8 Hour\n    ,\n    h: function h(i, utc) {\n        return rules.H(i, utc) % 12 || 12;\n    }\n\n    // (alias)\n    ,\n    HH: function HH(i, utc) {\n        return fillo(rules.H(i, utc));\n    }\n\n    // (alias)\n    ,\n    H: function H(i, utc) {\n        if (utc) {\n            return i.getUTCHours();\n        }\n        return i.getHours();\n    }\n\n    // Minutes\n    // 09 Minute\n    ,\n    mm: function mm(i, utc) {\n        return fillo(rules.m(i, utc));\n    }\n\n    // 9  Minute\n    ,\n    m: function m(i, utc) {\n        if (utc) {\n            return i.getUTCMinutes();\n        }\n        return i.getMinutes();\n    }\n\n    // Seconds\n    // 09 Seconds\n    ,\n    ss: function ss(i, utc) {\n        return fillo(rules.s(i, utc));\n    }\n\n    // 9  Seconds\n    ,\n    s: function s(i, utc) {\n        if (utc) {\n            return i.getUTCSeconds();\n        }\n        return i.getSeconds();\n    }\n\n    // Fractional seconds\n    // 0 1 ... 8 9\n    ,\n    S: function S(i, utc) {\n        return Math.round(rules.s(i, utc) / 60 * 10);\n    },\n    SS: function SS(i, utc) {\n        return fillo(rules.s(i, utc) / 60 * 100);\n    },\n    SSS: function SSS(i, utc) {\n        return fillo(rules.s(i, utc) / 60 * 1000, 3);\n    }\n\n    // Timezones\n    ,\n    Z: function Z(i) {\n        var offset = -i.getTimezoneOffset();\n        return (offset >= 0 ? \"+\" : \"-\") + fillo(parseInt(offset / 60)) + \":\" + fillo(offset % 60);\n    },\n    ZZ: function ZZ(i) {\n        var offset = -i.getTimezoneOffset();\n        return (offset >= 0 ? \"+\" : \"-\") + fillo(parseInt(offset / 60)) + fillo(offset % 60);\n    }\n};\n\nvar parser = new ParseIt(rules);\n\n/**\n * formatoid\n * Formats the date into a given format.\n *\n * Usable format fields:\n *\n *  - **Years**\n *      - `YYYY` (e.g. `\"2015\"`)\n *      - `YY` (e.g. `\"15\"`)\n *  - **Months**\n *      - `MMMM` (e.g. `\"January\"`)\n *      - `MMM` (e.g. `\"Jan\"`)\n *      - `MM` (e.g. `\"01\"`)\n *      - `M` (e.g. `\"1\"`)\n *  - **Days**\n *      - `dddd` (e.g. `\"Sunday\"`)\n *      - `ddd` (e.g. `\"Sun\"`)\n *      - `dd` (e.g. `\"Su\"`)\n *      - `d` (e.g. `\"Su\"`)\n *  - **Dates**\n *      - `DD` (e.g. `\"07\"`)\n *      - `D` (e.g. `\"7\"`)\n *  - **AM/PM**\n *      - `A` (e.g. `\"AM\"`)\n *      - `a` (e.g. `\"pm\"`)\n *  - **Hours**\n *      - `hh` (e.g. `\"07\"`)–12 hour format\n *      - `h` (e.g. `\"7\"`)\n *      - `HH` (e.g. `\"07\"`)–24 hour format\n *      - `H` (e.g. `\"7\"`)\n *  - **Minutes**\n *      - `mm` (e.g. `\"07\"`)\n *      - `m` (e.g. `\"7\"`)\n *  - **Seconds**\n *      - `ss` (e.g. `\"07\"`)\n *      - `s` (e.g. `\"7\"`)\n *  - **Fractional seconds**\n *      - `S` (e.g. `0 1 2 3 ... 9`)\n *      - `SS` (e.g. `00 01 02 ... 98 99`)\n *      - `SS` (e.g. `000 001 002 ... 998 999`)\n *  - **Timezones**\n *      - `Z` (e.g. `-07:00 -06:00 ... +06:00 +07:00`)\n *      - `ZZ` (e.g. `-0700 -0600 ... +0600 +0700`)\n *\n * @name formatoid\n * @function\n * @param {Date} i The date object.\n * @param {String} f The date format.\n * @return {String} The formatted date (as string).\n */\nmodule.exports = function formatoid(i, f) {\n    return parser.run(f, [i, i._useUTC]);\n};"]},"metadata":{},"sourceType":"script"}