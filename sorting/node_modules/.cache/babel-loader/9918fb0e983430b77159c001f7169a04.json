{"ast":null,"code":"\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar regexEscape = require(\"regex-escape\");\n\nvar ParseIt = function () {\n  /**\n   * ParseIt\n   * The `ParseIt` class. It can be used to use the same data object but with different formats/arguments.\n   *\n   * @name ParseIt\n   * @function\n   * @param {Object} obj An object containing the fields to replace.\n   */\n  function ParseIt(obj) {\n    _classCallCheck(this, ParseIt);\n\n    this.obj = obj || {};\n    this.re = new RegExp(\"^(\" + Object.keys(obj).map(regexEscape).join(\"|\") + \")\");\n  }\n  /**\n   * run\n   * Replaces the fields in the format string with data coming from the data object.\n   *\n   *\n   * @name parseIt\n   * @function\n   * @param {String} format The format input.\n   * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n   * @return {String} The result as string.\n   */\n\n\n  _createClass(ParseIt, [{\n    key: \"run\",\n    value: function run(format, args) {\n      var result = \"\";\n      args = args || [];\n\n      do {\n        var arr = format.match(this.re),\n            field = arr && arr[1],\n            c = field || format.charAt(0);\n\n        if (field) {\n          var value = this.obj[field];\n\n          if (typeof value === \"function\") {\n            value = value.apply(this, args);\n          }\n\n          result += value;\n        } else {\n          result += c;\n        }\n\n        format = format.substring(c.length);\n      } while (format);\n\n      return result;\n    }\n  }]);\n\n  return ParseIt;\n}();\n/**\n * parseIt\n * A wrapper around the `ParseIt` class. The `ParseIt` constructor is accessible using `parseIt.Parser`.\n *\n * @name parseIt\n * @function\n * @param {String} format The format input.\n * @param {Object} obj An object containing the fields to replace.\n * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n * @return {String} The result as string.\n */\n\n\nfunction parseIt(format, obj, args) {\n  return new ParseIt(obj).run(format, args);\n}\n\nparseIt.Parser = ParseIt;\nmodule.exports = parseIt;","map":{"version":3,"sources":["C:/Users/Roger/Code/Projects/sortingRepo/sorting/node_modules/parse-it/lib/index.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","regexEscape","require","ParseIt","obj","re","RegExp","keys","map","join","value","run","format","args","result","arr","match","field","c","charAt","apply","substring","parseIt","Parser","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar regexEscape = require(\"regex-escape\");\n\nvar ParseIt = function () {\n    /**\n     * ParseIt\n     * The `ParseIt` class. It can be used to use the same data object but with different formats/arguments.\n     *\n     * @name ParseIt\n     * @function\n     * @param {Object} obj An object containing the fields to replace.\n     */\n    function ParseIt(obj) {\n        _classCallCheck(this, ParseIt);\n\n        this.obj = obj || {};\n        this.re = new RegExp(\"^(\" + Object.keys(obj).map(regexEscape).join(\"|\") + \")\");\n    }\n\n    /**\n     * run\n     * Replaces the fields in the format string with data coming from the data object.\n     *\n     *\n     * @name parseIt\n     * @function\n     * @param {String} format The format input.\n     * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n     * @return {String} The result as string.\n     */\n\n\n    _createClass(ParseIt, [{\n        key: \"run\",\n        value: function run(format, args) {\n            var result = \"\";\n            args = args || [];\n            do {\n                var arr = format.match(this.re),\n                    field = arr && arr[1],\n                    c = field || format.charAt(0);\n\n                if (field) {\n                    var value = this.obj[field];\n                    if (typeof value === \"function\") {\n                        value = value.apply(this, args);\n                    }\n                    result += value;\n                } else {\n                    result += c;\n                }\n                format = format.substring(c.length);\n            } while (format);\n            return result;\n        }\n    }]);\n\n    return ParseIt;\n}();\n\n/**\n * parseIt\n * A wrapper around the `ParseIt` class. The `ParseIt` constructor is accessible using `parseIt.Parser`.\n *\n * @name parseIt\n * @function\n * @param {String} format The format input.\n * @param {Object} obj An object containing the fields to replace.\n * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n * @return {String} The result as string.\n */\n\n\nfunction parseIt(format, obj, args) {\n    return new ParseIt(obj).run(format, args);\n}\n\nparseIt.Parser = ParseIt;\n\nmodule.exports = parseIt;"]},"metadata":{},"sourceType":"script"}