{"ast":null,"code":"\"use strict\"; // Dependencies\n\nvar GitHubColors = require(\"github-colors\"),\n    GitHub = require(\"gh.js\");\n/**\n * GhPolyglot\n * Creates a new instance of `GhPolyglot`.\n *\n * @name GhPolyglot\n * @function\n * @param {String} input The repository full name\n * (e.g. `\"IonicaBizau/gh-polyglot\"`) or the username (e.g. `\"IonicaBizau\"`).\n * @param {String} token An optional GitHub token used for making\n * authenticated requests.\n * @param {String} host An optional alternative Github FQDN (e.g. `\"https://github.myenterprise.com/api/v3/\"`)\n * @return {GhPolyglot} The `GhPolyglot` instance.\n */\n\n\nfunction GhPolyglot(input, token, host) {\n  var splits = input.split(\"/\");\n  this.user = splits[0];\n  this.repo = splits[1];\n  this.full_name = input;\n  this.gh = new GitHub({\n    token: token,\n    host: host\n  });\n}\n/**\n * getAllRepos\n * Gets all user's repositories.\n *\n * @name getAllRepos\n * @function\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\n\n\nGhPolyglot.prototype.getAllRepos = function (callback) {\n  var self = this;\n  return self.gh.get(\"users/\" + self.user + \"/repos\", {\n    all: true\n  }, function (err, repos) {\n    if (err) {\n      return callback(err);\n    }\n\n    repos = repos.filter(function (c) {\n      return !c.fork;\n    });\n\n    if (!repos.length) {\n      callback(new Error(\"This user doesn't have any repositories.\"));\n    }\n\n    callback(null, repos);\n  });\n};\n/**\n * repoStats\n * Gets repository stats.\n *\n * @name repoStats\n * @function\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\n\n\nGhPolyglot.prototype.repoStats = function (callback) {\n  return this.gh.get(\"repos/\" + this.full_name + \"/languages\", this.check(callback));\n};\n/**\n * userStats\n * Gets user stats.\n *\n * @name userStats\n * @function\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\n\n\nGhPolyglot.prototype.userStats = function (callback) {\n  return this.getAllRepos(this.check(callback));\n};\n/**\n * check\n * Wraps the callback in another function to manipulate the data.\n *\n * @name check\n * @function\n * @param {Function} callback The callback function.\n * @return {Function} The wrapping function which gets the `err` and `data`\n * arguments and changes the data converting it into an array.\n */\n\n\nGhPolyglot.prototype.check = function (callback) {\n  return function (err, data, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    var languages = {},\n        arrData = [];\n\n    if (Array.isArray(data)) {\n      data.forEach(function (c) {\n        languages[c.language] = languages[c.language] || 0;\n        ++languages[c.language];\n      });\n\n      if (languages[\"null\"]) {\n        languages.Others = languages[\"null\"];\n        delete languages[\"null\"];\n      }\n    } else {\n      languages = data;\n    }\n\n    arrData = Object.keys(languages).map(function (cLang) {\n      return {\n        label: cLang,\n        value: languages[cLang],\n        color: GitHubColors.get(cLang, true).color\n      };\n    });\n    callback(null, arrData.sort(function (a, b) {\n      return a.value < b.value ? 1 : -1;\n    }));\n  };\n};\n\nmodule.exports = GhPolyglot;","map":{"version":3,"sources":["C:/Users/Roger/Code/Projects/sortingRepo/sorting/node_modules/gh-polyglot/lib/index.js"],"names":["GitHubColors","require","GitHub","GhPolyglot","input","token","host","splits","split","user","repo","full_name","gh","prototype","getAllRepos","callback","self","get","all","err","repos","filter","c","fork","length","Error","repoStats","check","userStats","data","res","languages","arrData","Array","isArray","forEach","language","Others","Object","keys","map","cLang","label","value","color","sort","a","b","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// Dependencies\nvar GitHubColors = require(\"github-colors\"),\n    GitHub = require(\"gh.js\");\n\n/**\n * GhPolyglot\n * Creates a new instance of `GhPolyglot`.\n *\n * @name GhPolyglot\n * @function\n * @param {String} input The repository full name\n * (e.g. `\"IonicaBizau/gh-polyglot\"`) or the username (e.g. `\"IonicaBizau\"`).\n * @param {String} token An optional GitHub token used for making\n * authenticated requests.\n * @param {String} host An optional alternative Github FQDN (e.g. `\"https://github.myenterprise.com/api/v3/\"`)\n * @return {GhPolyglot} The `GhPolyglot` instance.\n */\nfunction GhPolyglot(input, token, host) {\n    var splits = input.split(\"/\");\n    this.user = splits[0];\n    this.repo = splits[1];\n    this.full_name = input;\n    this.gh = new GitHub({ token: token, host: host });\n}\n\n/**\n * getAllRepos\n * Gets all user's repositories.\n *\n * @name getAllRepos\n * @function\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\nGhPolyglot.prototype.getAllRepos = function (callback) {\n    var self = this;\n    return self.gh.get(\"users/\" + self.user + \"/repos\", {\n        all: true\n    }, function (err, repos) {\n\n        if (err) {\n            return callback(err);\n        }\n\n        repos = repos.filter(function (c) {\n            return !c.fork;\n        });\n\n        if (!repos.length) {\n            callback(new Error(\"This user doesn't have any repositories.\"));\n        }\n\n        callback(null, repos);\n    });\n};\n\n/**\n * repoStats\n * Gets repository stats.\n *\n * @name repoStats\n * @function\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\nGhPolyglot.prototype.repoStats = function (callback) {\n    return this.gh.get(\"repos/\" + this.full_name + \"/languages\", this.check(callback));\n};\n\n/**\n * userStats\n * Gets user stats.\n *\n * @name userStats\n * @function\n * @param {Function} callback The callback function.\n * @return {Request} The request object.\n */\nGhPolyglot.prototype.userStats = function (callback) {\n    return this.getAllRepos(this.check(callback));\n};\n\n/**\n * check\n * Wraps the callback in another function to manipulate the data.\n *\n * @name check\n * @function\n * @param {Function} callback The callback function.\n * @return {Function} The wrapping function which gets the `err` and `data`\n * arguments and changes the data converting it into an array.\n */\nGhPolyglot.prototype.check = function (callback) {\n    return function (err, data, res) {\n        if (err) {\n            return callback(err);\n        }\n\n        var languages = {},\n            arrData = [];\n\n        if (Array.isArray(data)) {\n            data.forEach(function (c) {\n                languages[c.language] = languages[c.language] || 0;\n                ++languages[c.language];\n            });\n\n            if (languages[\"null\"]) {\n                languages.Others = languages[\"null\"];\n                delete languages[\"null\"];\n            }\n        } else {\n            languages = data;\n        }\n\n        arrData = Object.keys(languages).map(function (cLang) {\n            return {\n                label: cLang,\n                value: languages[cLang],\n                color: GitHubColors.get(cLang, true).color\n            };\n        });\n\n        callback(null, arrData.sort(function (a, b) {\n            return a.value < b.value ? 1 : -1;\n        }));\n    };\n};\n\nmodule.exports = GhPolyglot;"]},"metadata":{},"sourceType":"script"}